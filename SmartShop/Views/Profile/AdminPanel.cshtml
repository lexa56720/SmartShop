@{
    ViewData["Title"] = "Admin panel";
}
@model AdminPanelViewModel;

<div class="tab">
    <button class="tablinks" onclick="openTab(event, 'productsTab')" id="defaultOpen">Products</button>
    <button class="tablinks" onclick="openTab(event, 'tablesTab')">Tables</button>
</div>

<div id="productsTab" class="tabcontent">
    <form id="product" action="api/AddProduct" method="post">

        <div class="form-group">
            <label for="unitsAvailable">Units svailable</label>
            <input type="number" class="form-control" id="unitsAvailable" name="unitsAvailable" required>
        </div>

        <div class="form-group">
            <label for="releaseDate">Release Date</label>
            <input type="date" class="form-control" id="releaseDate" name="releaseDate" required>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <input type="number" class="form-control" id="price" name="price" required>
        </div>

        <div class="form-group">
            <label for="name">Name</label>
            <input type="text" class="form-control" id="name" name="name" required>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <textarea type="text" class="form-control" id="description" name="description" required>

                </textarea>
        </div>

        <div class="form-group">
            <label for="memorySize">Memory Size (GB)</label>
            <input type="number" class="form-control" id="memorySize" name="memorySize" required>
        </div>

        <div class="form-group">
            <label for="ramSize">RAM Size (GB)</label>
            <input type="number" class="form-control" id="ramSize" name="ramSize" required>
        </div>

        <div class="form-group">
            <label for="megaPixels">Megapixels</label>
            <input type="number" class="form-control" id="megaPixels" name="megaPixels" required>
        </div>

        <div class="form-group">
            <label for="producerId">Producer</label>
            <input class="form-control" list="producers" id="producerName" name="producerName" required>
            <datalist id="producers">
                @foreach (var producer in Model.Producers)
                {
                    <option>@producer.Name</option>
                }
            </datalist>
        </div>

        <div class="form-group" style="margin: 10px;">
            <label for="image">Images</label>
            <input type="file" id="image" name="image" accept="image/png, image/jpeg" required multiple onchange="previewImages(event)" />
            <div id="image-preview" style="margin-top: 10px;"></div>
        </div>


        <button type="button" class="btn btn-primary" onclick="TrySendForm('product','AddProduct','succsess','failure');">Submit</button>

        <div class="form-group" style="margin: 10px;">
            <div id="failure" class="failure" style="visibility:hidden">Fail</div>
            <div id="succsess" class="success" style="visibility:hidden">Succsess</div>
        </div>
    </form>
</div>

<div id="tablesTab" class="tabcontent">

    @Html.DropDownListFor(m => m.Tables, new SelectList(Model.Tables.Where(t => t != "OrderSmartphone")), "Выберите таблицу", new { @onchange = "Load(this.value)" })

    <div id="content"></div>
</div>


<script>
    document.getElementById("defaultOpen").click();

    function previewImages(event) {
        var preview = document.getElementById('image-preview');
        preview.innerHTML = ''; // Clear previous previews

        var files = event.target.files;

        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var reader = new FileReader();

            reader.onload = function (e) {
                var img = document.createElement('img');
                img.src = e.target.result;
                img.style.maxWidth = '100px'; // Set max width for preview images
                img.style.marginRight = '10px'; // Add some space between images
                preview.appendChild(img);
            }

            reader.readAsDataURL(file);
        }
    }

    function openTab(evt, tabName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }
</script>

